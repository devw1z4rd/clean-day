name: Deploy Nuxt site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci

      - name: Verify secrets
        run: |
          echo "üîç Checking environment variables..."
          
          # Supabase secrets (legacy)
          if [ -z "${{ secrets.VITE_SUPABASE_URL }}" ]; then
            echo "::warning::VITE_SUPABASE_URL is not set in the repository secrets."
          else
            echo "‚úÖ VITE_SUPABASE_URL is available."
          fi
          
          if [ -z "${{ secrets.VITE_SUPABASE_KEY }}" ]; then
            echo "::warning::VITE_SUPABASE_KEY is not set in the repository secrets."
          else
            echo "‚úÖ VITE_SUPABASE_KEY is available."
          fi
          
          # Sync API secrets (new)
          if [ -z "${{ secrets.VITE_SYNC_API_URL }}" ]; then
            echo "::warning::VITE_SYNC_API_URL is not set - sync features will be disabled."
          else
            echo "‚úÖ VITE_SYNC_API_URL is available."
          fi
          
          if [ -z "${{ secrets.VITE_SYNC_API_KEY }}" ]; then
            echo "::notice::VITE_SYNC_API_KEY is not set - using API without authentication."
          else
            echo "‚úÖ VITE_SYNC_API_KEY is available."
          fi
          
          echo "üèÅ Environment check completed."

      - name: Generate config.js
        run: |
          echo "üìÑ Generating runtime config..."
          mkdir -p public
          cat > public/config.js << EOL
          window.ENV = {
            SUPABASE_URL: "${{ secrets.VITE_SUPABASE_URL }}",
            SUPABASE_KEY: "${{ secrets.VITE_SUPABASE_KEY }}",
            SYNC_API_URL: "${{ secrets.VITE_SYNC_API_URL }}",
            SYNC_API_KEY: "${{ secrets.VITE_SYNC_API_KEY }}"
          };
          EOL
          echo "‚úÖ Generated public/config.js"
          
      - name: Create .env file
        run: |
          echo "‚öôÔ∏è Creating environment file for build..."
          cat > .env << EOL
          VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_KEY=${{ secrets.VITE_SUPABASE_KEY }}
          VITE_SYNC_API_URL=${{ secrets.VITE_SYNC_API_URL }}
          VITE_SYNC_API_KEY=${{ secrets.VITE_SYNC_API_KEY }}
          EOL
          echo "‚úÖ Created .env file for build process"
          
          # Show non-sensitive env info for debugging
          echo "üîç Environment variables (masked):"
          echo "VITE_SUPABASE_URL: $([ -n "${{ secrets.VITE_SUPABASE_URL }}" ] && echo "SET" || echo "NOT_SET")"
          echo "VITE_SUPABASE_KEY: $([ -n "${{ secrets.VITE_SUPABASE_KEY }}" ] && echo "SET" || echo "NOT_SET")"
          echo "VITE_SYNC_API_URL: $([ -n "${{ secrets.VITE_SYNC_API_URL }}" ] && echo "SET" || echo "NOT_SET")"
          echo "VITE_SYNC_API_KEY: $([ -n "${{ secrets.VITE_SYNC_API_KEY }}" ] && echo "SET" || echo "NOT_SET")"
      
      - name: Build
        run: |
          echo "üèóÔ∏è Building Nuxt application..."
          npm run build
        env:
          NUXT_APP_BASE_URL: '/clean-day/'
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_KEY: ${{ secrets.VITE_SUPABASE_KEY }}
          VITE_SYNC_API_URL: ${{ secrets.VITE_SYNC_API_URL }}
          VITE_SYNC_API_KEY: ${{ secrets.VITE_SYNC_API_KEY }}
      
      - name: Copy config.js to output
        run: |
          echo "üìã Copying runtime config to build output..."
          ls -la public/ || echo "No public directory found"
          ls -la .output/public/ || echo "No .output/public directory found"
          
          if [ -f "public/config.js" ] && [ -d ".output/public" ]; then
            cp public/config.js .output/public/
            echo "‚úÖ Copied config.js to .output/public/"
          else
            echo "::warning::Could not copy config.js - checking directory structure:"
            find . -name "config.js" -type f 2>/dev/null || echo "No config.js found"
            find . -name ".output" -type d 2>/dev/null || echo "No .output directory found"
          fi
          
      - name: Setup 404 page for GitHub Pages
        run: |
          echo "üîß Setting up 404 page for SPA routing..."
          
          # Copy static 404.html if it exists
          if [ -f "public/404.html" ]; then
            cp public/404.html .output/public/404.html
            echo "‚úÖ Copied static 404.html"
          else
            # Create 404.html from index.html for SPA routing fallback
            if [ -f ".output/public/index.html" ]; then
              cp .output/public/index.html .output/public/404.html
              echo "‚úÖ Created 404.html from index.html for SPA routing"
            else
              echo "::warning::No index.html found to create 404.html fallback"
            fi
          fi
          
      - name: Create .nojekyll file
        run: |
          echo "üö´ Creating .nojekyll file..."
          touch .output/public/.nojekyll
          echo "‚úÖ Created .nojekyll file to disable Jekyll processing"
      
      - name: Verify build output
        run: |
          echo "üîç Verifying build output..."
          echo "üìÅ Build directory structure:"
          find .output/public -type f | head -20
          
          echo ""
          echo "üìä Build statistics:"
          echo "Total files: $(find .output/public -type f | wc -l)"
          echo "Total size: $(du -sh .output/public | cut -f1)"
          
          echo ""
          echo "üîë Key files:"
          ls -la .output/public/index.html 2>/dev/null && echo "‚úÖ index.html found" || echo "‚ùå index.html missing"
          ls -la .output/public/404.html 2>/dev/null && echo "‚úÖ 404.html found" || echo "‚ùå 404.html missing"
          ls -la .output/public/.nojekyll 2>/dev/null && echo "‚úÖ .nojekyll found" || echo "‚ùå .nojekyll missing"
          ls -la .output/public/config.js 2>/dev/null && echo "‚úÖ config.js found" || echo "‚ö†Ô∏è config.js missing"
          
          echo ""
          echo "Ready for deployment!"
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./.output/public
  
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Deployment summary
        run: |
          echo "Deployment completed successfully!"
          echo "Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Clean Day is now live!"